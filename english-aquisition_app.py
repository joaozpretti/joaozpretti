import streamlit as st
from deep_translator import GoogleTranslator
from gtts import gTTS
import pygame
import tempfile
import os

st.set_page_config(page_title="Aquisicao de Ingl√™s AI", layout="wide")
st.title("üß† English Acquisition LAB - Online")

# Fun√ß√µes
def gerar_frase_associativa_g4f(expressao):
    prompt = (
        f"Voc√™ √© um gerador de frases para aquisi√ß√£o de ingl√™s. "
        f"Sempre crie uma frase curta e natural em ingl√™s usando ou come√ßando com '{expressao}', "
        f"e logo depois concatene com uma ideia relevante para o final da frase em portugu√™s, no formato: "
        f"[frase completa em ingl√™s] + [continua√ß√£o em portugu√™s associada ao contexto]. "
        f"Exemplo: What's that sound + que acordei no meio da noite ouvindo.\n"
        f"Agora gere uma frase para '{expressao}' no mesmo formato:"
    )
    response = g4f.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": prompt}],
        stream=False
    )
    return response.strip()

def traduzir_tudo_para_pt_gpt(frase_completa):
    prompt = (
        f"Traduza a frase abaixo para o portugu√™s natural e fluente, juntando todas as partes em uma frase s√≥:\n\n{frase_completa}"
    )
    response = g4f.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": prompt}],
        stream=False
    )
    return response.strip()

def traduzir_tudo_para_en(frase_completa):
    prompt = (
        f"Traduza a frase abaixo para o ingl√™s natural, juntando todas as partes num texto √∫nico e fluente, mantendo o sentido e contexto:\n\n{frase_completa}"
    )
    response = g4f.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": prompt}],
        stream=False
    )
    return response.strip()

def quiz(frase_en, frase_pt):
    prompt = (
        f"Crie uma pergunta de m√∫ltipla escolha (quiz) com 4 alternativas, sobre a frase inglesa abaixo e sua tradu√ß√£o. Pergunte algo relevante sobre vocabul√°rio, gram√°tica ou significado. Responda no formato:\nPergunta:\nA)\nB)\nC)\nD)\nResposta correta: (letra)\n\nFrase em ingl√™s: {frase_en}\nTradu√ß√£o: {frase_pt}"
    )
    response = g4f.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": prompt}],
        stream=False
    )
    return response.strip()

def gerar_contexto(frase_en):
    prompt = (
        f"Crie um mini-di√°logo ou exemplo de uso real para esta frase em ingl√™s, com contexto natural e curto. Mostre s√≥ o di√°logo/situa√ß√£o, sem tradu√ß√£o.\n\nFrase: {frase_en}"
    )
    response = g4f.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": prompt}],
        stream=False
    )
    return response.strip()

# Interface
with st.form("frase_form"):
    expressao = st.text_input("Digite a palavra, frase ou express√£o em ingl√™s", "")
    submitted = st.form_submit_button("Gerar Frase")

if expressao and submitted:
    st.info("Gerando frase e contexto... aguarde ‚è≥")
    resultado = gerar_frase_associativa_g4f(expressao)
    frase_pt = traduzir_tudo_para_pt_gpt(resultado)
    frase_en = traduzir_tudo_para_en(resultado)
    contexto = gerar_contexto(frase_en)
    st.markdown(f"### Associativo EN+PT:\n> **{resultado}**")
    st.success(f"**Portugu√™s:** {frase_pt}")
    st.info(f"**Ingl√™s:** {frase_en}")
    st.markdown(f"---\n#### Mini-Di√°logo/Contexto:\n{contexto}")

    st.markdown("---")
    st.subheader("Quiz R√°pido")
    st.caption("Teste sua compreens√£o:")
    quiz_ = quiz(frase_en, frase_pt)
    st.code(quiz_, language="markdown")

    # TTS para escutar (s√≥ funciona local, n√£o web)
    # try:
    #     tts = gTTS(frase_en, lang="en")
    #     with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
    #         tts.save(f.name)
    #         audio_file = open(f.name, "rb")
    #         st.audio(audio_file.read(), format="audio/mp3")
    # except Exception as e:
    #     st.warning("Erro ao gerar √°udio TTS.")
else:
    st.warning("Digite uma express√£o/frase e clique em Gerar Frase.")

st.markdown("---\n_Criado para aquisi√ß√£o de ingl√™s via IA. Deploy gratuito: [Streamlit Cloud](https://streamlit.io/cloud)_")

